TSLoad (TimeSeries Loader) - low-level part of vPerfLoader, that is running workloads directly on target host.

It constists of:
* cmd/tsloadd - agent that receives workloads from vPerfLoader server and executes them
* cmd/run-tsload - standalone application that runs workloads from file
* lib/libjson - JSON library: http://sourceforge.net/projects/libjson/
* lib/libtsload - helper functions for tsloadd adn run-tsload
* mod/ - workload modules

Coding and naming conventions
-----------------------------

For code BSD-like style is prefferred with 4-spaces tabstops:
if(cond) {
^^^^something();
}

Function, type and variable naming is GNU with undescores and all letters are lower-case. 
All names should have prefixes for subsystems or objects they are working with:
- log_* - logging functions
- mod_* - functions for modules
- t_*	- threads
- tp_*	- thread pools
- wlp_* - workload parameter description
- wl_*	- workload
- clnt_* - client (in tsloadd)

Macroses are uppercased. They are also using underscores as delimiters except for macroses which 
are defining buffer sizes, i.e. MODPATHLEN

Special case is JSON because most modules have JSON functions. So each JSON function should have name
formed by this pattern:
json_(object)_(format|proc)_[all]
* object is a structure which would be converted
* format - function that creates JSON from object; proc is vice versa
* all - suffix for arrays or linked lists (optional)

I.e.:
	json_wlparam_proc_all - processes array of workload parameters from JSON array or node
	json_wlparam_proc - processes single workload parameter
	json_wlparam_format_all - creates JSON representation for workload parameter description

Here is include files order:
#define LOG_SOURCE "source"
#include <log.h>
#include <libtsload or command's includes>
#include <other tsload's libraries includes (libjson)>
#include <C library includes (i.e. stdio.h)>
#include <other system libraries includes (such as pthread, socket operations)>
Each section is delimited by empty line

Makefiles and build system
--------------------------

For now, entire tsload is build by GNU make - no autoconf or more sophisticated build systems.
tsload build to build/ directory:
* build/obj/<target>/ - object files
* build/lib/ - shared libraries (statically linked)
* build/mod/ - modules
* build/ - binaries and other files

There are two files in root directory: Makefile.master contains make variables and Makefile.build
contains build targets. Each target has own Makefile:
TYPE = SHARED # EXEC for binary, SHARED for library, MODULE for module
TARGET = lib/libtsload.so # build target

include ../../Makefile.master

SRC = #list of sources
OBJ = $(SRC:.c=.o)

# Modifications of CFLAGS, LDFLAGS, etc...	

include ../../Makefile.build

Root Makefile proxies all requests to subdirectories via make -C <target> <target>. So you can
simply say
$ make 
or
$ make clean
in root directory 