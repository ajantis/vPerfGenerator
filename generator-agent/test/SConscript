from pathutil import *

import sys
import os

from ConfigParser import ConfigParser

Import('env')

gen_target = 'tests'
target = 'tests.log'

suite = env['TEST_SUITE']
test_binaries = []

def CreateConfig(target, source, env):
    test = env['TEST']
    
    cfg_file = file(str(target[0]), 'w')
    cfg = ConfigParser()
    
    cfg.add_section('test')
    cfg.set('test', 'name', test.name)
    cfg.set('test', 'group', test.group)
    cfg.set('test', 'maxtime', test.maxtime)
    cfg.set('test', 'expect', test.expect[0])
    cfg.set('test', 'expect_arg', test.expect[1])
    
    # Resolve libraries to real path of files
    lib_sect = cfg.add_section('libs')
    for lib in test.libs:
        lib_path = str(env['TESTLIBS'][lib][0])
        cfg.set('libs', lib, lib_path)
        
    use_sect = cfg.add_section('uses')
    for use in test.uses:
        use_path = os.path.join('test', test.group, use)
        cfg.set('uses', use, use_path)
    
    print >> cfg_file, "# This file is automatically generated"
    print >> cfg_file, "# Edit test/tests.list to alter it contents"
    print >> cfg_file, ""
    
    cfg.write(cfg_file)

env.Append(ENV = {'TSTEST_RUNNER_THREADS': 
                  GetOption('runner_threads')})
env.Append(ENV = {'TSTEST_TEST_DIRECTORY': 
                  GetOption('test_directory')})

if env.SupportedPlatform('win'):
    env.Append(ENV = {'TMPDIR': os.getenv('TMPDIR'),
                      'TEMP': os.getenv('TEMP'),
                      'TMP': os.getenv('TMP')})

common_objs = env.Object(Glob('common/*.c'))

for test in suite:
    if not test.enabled:
        continue
    
    # XXX: cloning entire environment for each test?
    tst = env.Clone()
    
    for lib in test.libs:
        tst.AddDeps(('lib', lib))
    
    tst['TEST'] = test
    tst['CPPPATH'] += ['test']
    
    if tst.SupportedPlatform('win'):
        tst['LIBS'] += ['DbgHelp']
    
    srcdirs = [Glob(PathJoin(test.group, dir, '*.c')) 
               for dir in test.dirs]
    srcfiles = [PathJoin(test.group, file_name) 
                for file_name in test.files] 
    test_target = PathJoin(test.group, 'tst_' + test.name)
    
    bin = tst.Program(test_target, srcdirs + srcfiles + common_objs)
    cfg = tst.Command(str(bin[0]) + '.cfg', [], CreateConfig)
    tst.Depends(bin, cfg[0])
    
    test_binaries.append(bin)
    
tests = env.Command(target, test_binaries, 
            '%s tools/test/run-suite.py $SOURCES > $TARGET' % sys.executable)
env.AlwaysBuild(tests)
env.Alias(gen_target, target)    
